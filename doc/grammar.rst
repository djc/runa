****************
Language grammar
****************

The table below (which is generated from parser's source code)
can serve as a guide to Runa's grammar.
Code literals in rules represent regular expressions.
The special INDENT and DEDENT tokens are inserted by a secondary pass,
after the initial tokenization of source code;
they represent the increase and decrease of the indentation level.

+----------------+-----------------------------------------------------------------------------+
| module         | module-elems                                                                |
+----------------+-----------------------------------------------------------------------------+
|                | ``\n`` module-elems                                                         |
+----------------+-----------------------------------------------------------------------------+
| module-elems   | module-elems module-elem                                                    |
+----------------+-----------------------------------------------------------------------------+
|                | module-elem                                                                 |
+----------------+-----------------------------------------------------------------------------+
| module-elem    | function                                                                    |
+----------------+-----------------------------------------------------------------------------+
|                | function-decl                                                               |
+----------------+-----------------------------------------------------------------------------+
|                | class                                                                       |
+----------------+-----------------------------------------------------------------------------+
|                | asgt                                                                        |
+----------------+-----------------------------------------------------------------------------+
|                | trait                                                                       |
+----------------+-----------------------------------------------------------------------------+
|                | ``from`` dotted ``import`` names ``\n``                                     |
+----------------+-----------------------------------------------------------------------------+
| dotted         | var ``\.`` ``[a-zA-Z_][a-zA-Z0-9_]*``                                       |
+----------------+-----------------------------------------------------------------------------+
|                | var                                                                         |
+----------------+-----------------------------------------------------------------------------+
| names          | names ``,`` var                                                             |
+----------------+-----------------------------------------------------------------------------+
|                | var                                                                         |
+----------------+-----------------------------------------------------------------------------+
| trait          | ``trait`` var type-params ``:`` ``\n`` ``INDENT`` function-decls ``DEDENT`` |
+----------------+-----------------------------------------------------------------------------+
| function-decls | function-decls function-decl                                                |
+----------------+-----------------------------------------------------------------------------+
|                | function-decl                                                               |
+----------------+-----------------------------------------------------------------------------+
| function-decl  | ``def`` var formal-list rtype ``\n``                                        |
+----------------+-----------------------------------------------------------------------------+
| class          | ``class`` var type-params ``:`` ``\n`` ``INDENT`` class-body ``DEDENT``     |
+----------------+-----------------------------------------------------------------------------+
| type-params    | ``\[`` type-params ``,`` type-param ``\]``                                  |
+----------------+-----------------------------------------------------------------------------+
|                | ``\[`` type-param ``\]``                                                    |
+----------------+-----------------------------------------------------------------------------+
|                |                                                                             |
+----------------+-----------------------------------------------------------------------------+
| type-param     | type                                                                        |
+----------------+-----------------------------------------------------------------------------+
| class-body     | attributes functions                                                        |
+----------------+-----------------------------------------------------------------------------+
|                | attributes                                                                  |
+----------------+-----------------------------------------------------------------------------+
|                | functions                                                                   |
+----------------+-----------------------------------------------------------------------------+
|                | ``pass`` ``\n``                                                             |
+----------------+-----------------------------------------------------------------------------+
| functions      | functions function                                                          |
+----------------+-----------------------------------------------------------------------------+
|                | function                                                                    |
+----------------+-----------------------------------------------------------------------------+
| attributes     | attributes attr-decl                                                        |
+----------------+-----------------------------------------------------------------------------+
|                | attr-decl                                                                   |
+----------------+-----------------------------------------------------------------------------+
| attr-decl      | var ``:`` type ``\n``                                                       |
+----------------+-----------------------------------------------------------------------------+
| function       | ``def`` var formal-list rtype ``:`` suite                                   |
+----------------+-----------------------------------------------------------------------------+
| rtype          |                                                                             |
+----------------+-----------------------------------------------------------------------------+
|                | ``->`` type                                                                 |
+----------------+-----------------------------------------------------------------------------+
| formal-list    | ``\(`` ``\)``                                                               |
+----------------+-----------------------------------------------------------------------------+
|                | ``\(`` formals ``\)``                                                       |
+----------------+-----------------------------------------------------------------------------+
| formals        | formals ``,`` formal                                                        |
+----------------+-----------------------------------------------------------------------------+
|                | formal                                                                      |
+----------------+-----------------------------------------------------------------------------+
| formal         | var                                                                         |
+----------------+-----------------------------------------------------------------------------+
|                | var ``:`` type                                                              |
+----------------+-----------------------------------------------------------------------------+
| suite          | ``\n`` ``INDENT`` statements ``DEDENT``                                     |
+----------------+-----------------------------------------------------------------------------+
| statements     | statements stmt                                                             |
+----------------+-----------------------------------------------------------------------------+
|                | stmt                                                                        |
+----------------+-----------------------------------------------------------------------------+
| stmt           | ``try`` ``:`` suite ``except`` var ``:`` suite                              |
+----------------+-----------------------------------------------------------------------------+
|                | ``for`` lval ``in`` expr-tuple ``:`` suite                                  |
+----------------+-----------------------------------------------------------------------------+
|                | ``while`` ternary ``:`` suite                                               |
+----------------+-----------------------------------------------------------------------------+
|                | if-suite                                                                    |
+----------------+-----------------------------------------------------------------------------+
|                | asgt                                                                        |
+----------------+-----------------------------------------------------------------------------+
|                | aug-asgt                                                                    |
+----------------+-----------------------------------------------------------------------------+
|                | yield                                                                       |
+----------------+-----------------------------------------------------------------------------+
|                | return                                                                      |
+----------------+-----------------------------------------------------------------------------+
|                | ``raise`` ternary ``\n``                                                    |
+----------------+-----------------------------------------------------------------------------+
|                | ``break`` ``\n``                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | ``continue`` ``\n``                                                         |
+----------------+-----------------------------------------------------------------------------+
|                | ``pass`` ``\n``                                                             |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``\n``                                                                 |
+----------------+-----------------------------------------------------------------------------+
| if-suite       | ``if`` ternary ``:`` suite                                                  |
+----------------+-----------------------------------------------------------------------------+
|                | ``if`` ternary ``:`` suite ``else`` ``:`` suite                             |
+----------------+-----------------------------------------------------------------------------+
|                | ``if`` ternary ``:`` suite elifs                                            |
+----------------+-----------------------------------------------------------------------------+
|                | ``if`` ternary ``:`` suite elifs ``else`` ``:`` suite                       |
+----------------+-----------------------------------------------------------------------------+
| elifs          | elifs elif                                                                  |
+----------------+-----------------------------------------------------------------------------+
|                | elif                                                                        |
+----------------+-----------------------------------------------------------------------------+
| elif           | ``elif`` ternary ``:`` suite                                                |
+----------------+-----------------------------------------------------------------------------+
| asgt           | lval ``=`` expr-tuple ``\n``                                                |
+----------------+-----------------------------------------------------------------------------+
| aug-asgt       | lval ``\+=`` expr-tuple ``\n``                                              |
+----------------+-----------------------------------------------------------------------------+
| yield          | ``yield`` expr-tuple ``\n``                                                 |
+----------------+-----------------------------------------------------------------------------+
| return         | ``return`` expr-tuple ``\n``                                                |
+----------------+-----------------------------------------------------------------------------+
|                | ``return`` ``\n``                                                           |
+----------------+-----------------------------------------------------------------------------+
| type           | ``\(`` type-tuple ``\)``                                                    |
+----------------+-----------------------------------------------------------------------------+
|                | type ``\?``                                                                 |
+----------------+-----------------------------------------------------------------------------+
|                | ``\$`` vtype                                                                |
+----------------+-----------------------------------------------------------------------------+
|                | ``&`` vtype                                                                 |
+----------------+-----------------------------------------------------------------------------+
|                | vtype                                                                       |
+----------------+-----------------------------------------------------------------------------+
| type-tuple     | type-tuple ``,`` type                                                       |
+----------------+-----------------------------------------------------------------------------+
|                | type ``,`` type                                                             |
+----------------+-----------------------------------------------------------------------------+
| vtype          | var ``\[`` type ``\]``                                                      |
+----------------+-----------------------------------------------------------------------------+
|                | var                                                                         |
+----------------+-----------------------------------------------------------------------------+
| expr-tuple     | ternary ``,`` ternary                                                       |
+----------------+-----------------------------------------------------------------------------+
|                | ternary                                                                     |
+----------------+-----------------------------------------------------------------------------+
| ternary        | expr ``if`` expr ``else`` expr                                              |
+----------------+-----------------------------------------------------------------------------+
|                | expr                                                                        |
+----------------+-----------------------------------------------------------------------------+
| expr           | expr ``\[`` expr ``\]``                                                     |
+----------------+-----------------------------------------------------------------------------+
|                | ``\(`` ternary ``\)``                                                       |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``\(`` actuals ``\)``                                                  |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``and`` expr                                                           |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``or`` expr                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | ``not`` expr                                                                |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``&`` expr                                                             |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``\|`` expr                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``\^`` expr                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``is`` expr                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``==`` expr                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``!=`` expr                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``<`` expr                                                             |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``>`` expr                                                             |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``<=`` expr                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``>=`` expr                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``%`` expr                                                             |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``\*`` expr                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``/`` expr                                                             |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``\+`` expr                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``-`` expr                                                             |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``as`` type                                                            |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``\.`` ``[a-zA-Z_][a-zA-Z0-9_]*``                                      |
+----------------+-----------------------------------------------------------------------------+
|                | var                                                                         |
+----------------+-----------------------------------------------------------------------------+
|                | ``"(.*?)"``                                                                 |
+----------------+-----------------------------------------------------------------------------+
|                | ``[-+?[0-9]*\.?[0-9]+``                                                     |
+----------------+-----------------------------------------------------------------------------+
|                | ``True|False``                                                              |
+----------------+-----------------------------------------------------------------------------+
|                | ``None``                                                                    |
+----------------+-----------------------------------------------------------------------------+
| actuals        | actuals ``,`` actual                                                        |
+----------------+-----------------------------------------------------------------------------+
|                | actual                                                                      |
+----------------+-----------------------------------------------------------------------------+
|                |                                                                             |
+----------------+-----------------------------------------------------------------------------+
| actual         | var ``=`` ternary                                                           |
+----------------+-----------------------------------------------------------------------------+
|                | ternary                                                                     |
+----------------+-----------------------------------------------------------------------------+
| lval           | lval ``,`` lval                                                             |
+----------------+-----------------------------------------------------------------------------+
|                | var                                                                         |
+----------------+-----------------------------------------------------------------------------+
|                | expr ``\.`` ``[a-zA-Z_][a-zA-Z0-9_]*``                                      |
+----------------+-----------------------------------------------------------------------------+
| var            | ``[a-zA-Z_][a-zA-Z0-9_]*``                                                  |
+----------------+-----------------------------------------------------------------------------+
