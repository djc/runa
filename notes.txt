Basics
======

Goal: a Python-like static language, i.e. doing away with much of the C noise.
To do this, I'd like to get rid of explicit pointer syntax; all mutable types
whose size is larger than a word will be passed by reference. To make that
possible, I need to get rid of outparams. To enable that, I need multiple
return values.

More C noise elimination: return on errors by default, i.e. exception flow.
Also, limit the amount of explicit types. Use local type inference for most
declarations, with types for function signatures (and possibly generics).


Secondary goals
===============

 * Definitely want operator overloading
 * Deterministic (RAII-like) memory management, no GC
 * Minimal generics rather then templates
 * Error propagation by default, light-weight exceptions
 * Optional, but inclusive standard library
 * Easy FFI would be nice


Inspiration
===========

Avery Pennarun
Three bad things: threads, garbage collection, and nondeterministic destructors
http://apenwarr.ca/log/?m=201008#10

Avery Pennarun
How to design a replacement for C++
http://apenwarr.ca/log/?m=201007#21

Collin Winter e.a.
Function annotations
http://www.python.org/dev/peps/pep-3107/

Shawn O. Pearce
Why Git is so fast (Java vs C)
http://marc.info/?l=git&m=124111702609723&w=2

Is Fortran faster than C?
http://stackoverflow.com/questions/146159/is-fortran-faster-than-c

Languages faster than C++
http://stackoverflow.com/questions/610396/languages-faster-than-c

Paul McGuire
A sample of a pyparsing grammar using indentation for grouping
http://pyparsing.wikispaces.com/file/view/indentedGrammarExample.py

Phil Hassey
tinypy: parse.py (Python Pratt parser, in Python)
http://code.google.com/p/tinypy/source/browse/trunk/tinypy/parse.py

Andreas Zwinkau
Faster than C
http://beza1e1.tuxen.de/articles/faster_than_C.html

Russ Cox
Go Data Structures: Interfaces
http://research.swtch.com/interfaces


Implementation notes
====================

Standard streams:

 - stdin: 0 (unistd.h: STDIN_FILENO)
 - stdout: 1 (unistd.h: STDOUT_FILENO)
 - stderr: 2 (unistd.h: STDERR_FILENO)

Context managers:

 - def __enter__(self)
 - def __exit__(self, type, value, traceback)

Generics:

Can we prevent keeping a pointer to the class inside every object? Only if
the compiler knows all of the types in advance. Alternative: keep a pointer to
the type of the contained type in containers. Simple first problem: str()
should accept any type and call its __str__() method.


How a Pratt parser works
========================

nud: null denotation, used when token appears at beginning of construct
led: left denotation, used when it appears inside the construct (left of rest)
lbp: left binding power, controls operator precedence; higher binds to right

- start by looking at first token, calling nud() on it
- if lbp of next is >= given rbp, call led for next
